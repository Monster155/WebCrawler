<!DOCTYPE html>
<html lang="ru" data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22ru%22%7D%7D">
<head >
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
  <meta name="referrer" content="unsafe-url">
  <title>Под капотом у компилятора Go: добавление нового оператора в Go — часть 1 / Хабр</title>
  <style>
    /* cyrillic-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSxf6TF0.woff2) format('woff2');
      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
    }

    /* cyrillic */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveQhf6TF0.woff2) format('woff2');
      unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
    }

    /* latin-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSBf6TF0.woff2) format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }

    /* latin */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveRhf6.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }

    /* non-breaking hyphen */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/l/font?kit=KFOlCnqEu92Fr1MmEU9vBh0_IsHAlmrO6g&skey=ee881451c540fdec&v=v29) format('woff2');
      unicode-range: U+02011;
    }
  </style>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.b6238726.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.2287bfbd.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.8d73f026.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.58744b80.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/js/7298.c8f1d73c.js" as="script">
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.b6238726.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.8d73f026.css">
  <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.99fdff73029c662d76a25e7927355795.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
  
  <script data-vue-meta="ssr" type="application/ld+json" data-vmid="ldjson-schema">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/company\/otus\/blog\/706942\/"},"headline":"Под капотом у компилятора Go: добавление нового оператора в Go — часть 1","datePublished":"2022-12-21T19:27:11+03:00","dateModified":"2022-12-22T01:47:15+03:00","author":{"@type":"Person","name":"OTUS"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19.Э...","url":"https:\/\/habr.com\/ru\/company\/otus\/blog\/706942\/#post-content-body","about":["c_otus","h_programming","h_go","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/706942\/fdf0ad66f40095b2a39aa80c538d4cee\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/508\/4b7\/6b8\/5084b76b82bb43344e90040cf4b7ac76.png"]}</script>
  <script src="//www.googletagservices.com/tag/js/gpt.js" async></script>
  <style>.grecaptcha-badge{visibility: hidden;}</style>
  <meta name="habr-version" content="2.113.0">
  
  <meta data-vue-meta="ssr" property="fb:app_id" content="444736788986613"><meta data-vue-meta="ssr" property="fb:pages" content="472597926099084"><meta data-vue-meta="ssr" name="twitter:card" content="summary_large_image"><meta data-vue-meta="ssr" name="twitter:site" content="@habr_com"><meta data-vue-meta="ssr" property="og:site_name" content="Хабр" data-vmid="og:site_name"><meta data-vue-meta="ssr" property="og:title" content="Под капотом у компилятора Go: добавление нового оператора в Go — часть 1" data-vmid="og:title"><meta data-vue-meta="ssr" name="twitter:title" content="Под капотом у компилятора Go: добавление нового оператора в Go — часть 1" data-vmid="twitter:title"><meta data-vue-meta="ssr" name="aiturec:title" content="Под капотом у компилятора Go: добавление нового оператора в Go — часть 1" data-vmid="aiturec:title"><meta data-vue-meta="ssr" name="description" content="Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19. Это первая статья из серии из двух..." data-vmid="description"><meta data-vue-meta="ssr" itemprop="description" content="Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19. Это первая статья из серии из двух..." data-vmid="description:itemprop"><meta data-vue-meta="ssr" property="og:description" content="Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19. Это первая статья из серии из двух..." data-vmid="og:description"><meta data-vue-meta="ssr" name="twitter:description" content="Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19. Это первая статья из серии из двух..." data-vmid="twitter:description"><meta data-vue-meta="ssr" property="aiturec:description" content="Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19. Это первая статья из серии из двух..." data-vmid="aiturec:description"><meta data-vue-meta="ssr" itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/608/076/a17/608076a1757dfbce83231141a70a89ad.png" data-vmid="image:itemprop"><meta data-vue-meta="ssr" property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/608/076/a17/608076a1757dfbce83231141a70a89ad.png" data-vmid="og:image"><meta data-vue-meta="ssr" property="og:image:width" content="1200" data-vmid="og:image:width"><meta data-vue-meta="ssr" property="og:image:height" content="630" data-vmid="og:image:height"><meta data-vue-meta="ssr" property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/608/076/a17/608076a1757dfbce83231141a70a89ad.png" data-vmid="aiturec:image"><meta data-vue-meta="ssr" name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/608/076/a17/608076a1757dfbce83231141a70a89ad.png" data-vmid="twitter:image"><meta data-vue-meta="ssr" property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/608/076/a17/608076a1757dfbce83231141a70a89ad.png?format=vk" data-vmid="vk:image"><meta data-vue-meta="ssr" property="aiturec:item_id" content="706942" data-vmid="aiturec:item_id"><meta data-vue-meta="ssr" property="aiturec:datetime" content="2022-12-21T16:27:11.000Z" data-vmid="aiturec:datetime"><meta data-vue-meta="ssr" content="https://habr.com/ru/company/otus/blog/706942/" property="og:url" data-vmid="og:url"><meta data-vue-meta="ssr" property="og:type" content="article" data-vmid="og:type"><meta data-vue-meta="ssr" property="og:locale" content="ru_RU" data-vmid="og:locale"><meta data-vue-meta="ssr" name="keywords" content="go, golang, оператор в go, компилятор go">
  <link data-vue-meta="ssr" href="https://habr.com/ru/rss/post/706942/?fl=ru" type="application/rss+xml" title="" rel="alternate" name="rss"><link data-vue-meta="ssr" href="https://habr.com/ru/company/otus/blog/706942/" rel="canonical" data-vmid="canonical"><link data-vue-meta="ssr" rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/608/076/a17/608076a1757dfbce83231141a70a89ad.png" data-vmid="image:href"><link data-vue-meta="ssr" rel="amphtml" href="https://habr.com/ru/amp/post/706942/">
  <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
  <meta name="msapplication-TileColor" content="#629FBC">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="16x16"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png"
  >
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="32x32"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="76x76"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="120x120"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="152x152"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="180x180"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="256x256"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png"
  >
  <link
    rel="mask-icon"
    color="#77a2b6"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg"
  >
  <link
    crossorigin="use-credentials"
    href="/manifest.webmanifest"
    rel="manifest"
  >
  <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
  <script>window.yaContextCb = window.yaContextCb || []</script>
  <script src="https://yandex.ru/ads/system/context.js" async></script>
</head>
<body>


<div id="app" data-server-rendered="true" data-async-called="true"><div class="tm-layout__wrapper"><!----> <div></div> <!----> <header class="tm-header"><div class="tm-page-width"><div class="tm-header__container"><!----> <span class="tm-header__logo-wrap"><a href="/ru/" class="tm-header__logo tm-header__logo_ru"><svg height="16" width="16" class="tm-svg-img tm-header__icon"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> <div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><button class="tm-header__dropdown-toggle"><svg height="16" width="16" class="tm-svg-img tm-header__icon tm-header__icon_dropdown"><title>Открыть список</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#arrow-down"></use></svg></button></div> <!----></div> <a href="/ru/sandbox/start/" class="tm-header__become-author-btn">
            Как стать автором
          </a> <div class="tm-feature tm-header__feature tm-feature tm-feature_variant-inline"><!----></div> <!----> <!----></div></div></header> <div class="tm-layout"><div class="tm-page-progress-bar"></div> <div data-menu-sticky="true" class="tm-base-layout__header tm-base-layout__header_is-sticky"><div class="tm-page-width"><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!----> <a href="/ru/all/" class="tm-main-menu__item">
        Все потоки
      </a> <a href="/ru/flows/develop/" class="tm-main-menu__item">
          Разработка
        </a><a href="/ru/flows/admin/" class="tm-main-menu__item">
          Администрирование
        </a><a href="/ru/flows/design/" class="tm-main-menu__item">
          Дизайн
        </a><a href="/ru/flows/management/" class="tm-main-menu__item">
          Менеджмент
        </a><a href="/ru/flows/marketing/" class="tm-main-menu__item">
          Маркетинг
        </a><a href="/ru/flows/popsci/" class="tm-main-menu__item">
          Научпоп
        </a></nav></div></div> <div class="tm-header-user-menu tm-base-layout__user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search"><svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark"><title>Поиск</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#search"></use></svg></a> <!----> <!----> <!----> <div class="tm-header-user-menu__item tm-header-user-menu__user_desktop"><div class="tm-dropdown"><div class="tm-dropdown__head"><svg height="24" width="24" data-test-id="menu-toggle-guest" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark"><title>Профиль</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#header-user"></use></svg> <!----></div> <!----></div> <!----></div> <!----></div></div></div></div> <!----> <div class="tm-page-width"></div> <main class="tm-layout__container"><div hl="ru" companyName="otus" data-async-called="true" class="tm-page"><div class="tm-page-width"><div class="tm-page__header"><!----></div> <div class="tm-page__wrapper"><div class="tm-page__main tm-page__main_has-sidebar"><div class="pull-down"><!----> <div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg height="24" width="24" class="tm-svg-img pull-down__arrow"><title>Обновить</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#pull-arrow"></use></svg></div></div> <div class="tm-article-presenter"><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a href="/ru/company/otus/profile/" class="tm-company-card__avatar"><div class="tm-entity-image"><img alt="" height="48" src="//habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png" width="48" class="tm-entity-image__pic"></div></a> <!----> <div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"> <div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----> <div class="tm-votes-lever__score tm-votes-lever__score tm-votes-lever__score_appearance-rating"><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter tm-votes-lever__score-counter_rating">
        901.42
      </span></div> <!----></div></div> <div class="tm-counter-container__footer"><span class="tm-rating__text tm-rating__text">
      Рейтинг
    </span></div></div> <!----></div> <div class="tm-company-card__info"><a href="/ru/company/otus/profile/" class="tm-company-card__name">OTUS</a> <div class="tm-company-card__description">Цифровые навыки от ведущих экспертов</div></div></div> <!----></div> <div class="tm-article-presenter__body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><div class="tm-article-presenter__header"> <div class="tm-article-snippet tm-article-presenter__snippet tm-article-snippet"><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/MaxRokatansky/" title="MaxRokatansky" class="tm-user-info__userpic"><div class="tm-entity-image"><img alt="" height="24" src="//habrastorage.org/r/w32/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg" width="24" class="tm-entity-image__pic"></div></a> <span class="tm-user-info__user"><a href="/ru/users/MaxRokatansky/" class="tm-user-info__username">
      MaxRokatansky
      <!----></a> <span class="tm-article-datetime-published"><time datetime="2022-12-21T16:27:11.000Z" title="2022-12-21, 19:27">21  дек  2022 в 19:27</time></span></span></span></div> <!----></div> <h1 lang="ru" class="tm-article-snippet__title tm-article-snippet__title_h1"><span>Под капотом у компилятора Go: добавление нового оператора в Go — часть 1</span></h1> <div class="tm-article-snippet__stats"><!----> <div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Время на прочтение</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#clock"></use></svg></span> <span class="tm-article-reading-time__label">
    11 мин
  </span></div> <span class="tm-icon-counter tm-data-icons__item"><svg height="24" width="24" class="tm-svg-img tm-icon-counter__icon"><title>Количество просмотров</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-views"></use></svg> <span class="tm-icon-counter__value">6.2K</span></span></div> <div class="tm-article-snippet__hubs-container"><div class="tm-article-snippet__hubs"><span class="tm-article-snippet__hubs-item"><a href="/ru/company/otus/blog/" class="tm-article-snippet__hubs-item-link router-link-active"><span>Блог компании OTUS</span> <!----></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/programming/" class="tm-article-snippet__hubs-item-link"><span>Программирование</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/go/" class="tm-article-snippet__hubs-item-link"><span>Go</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span></div></div> <div class="tm-article-snippet__labels-container"><div class="tm-article-snippet__labels"><!----> <div class="tm-article-snippet__label tm-article-snippet__label tm-article-snippet__label_variant-translation"><span>
          Перевод
        </span></div></div></div> <!----> <!----></div></div> <div class="tm-article-presenter__origin"><a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/" target="_blank" class="tm-article-presenter__origin-link">
                Автор оригинала:
                <span>
                  eli.thegreenplace.net
                </span></a></div> <div data-gallery-root="" lang="ru" class="tm-article-body"><div></div> <div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>Обновление от 2022-08-09:</strong> процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19.</p><p>Это первая статья из серии из двух частей, в которой мы в форме туториала изучаем компилятор Go. Компилятор большой, и для его корректного описания потребовалась бы целая книга, поэтому идея этих постов заключается в том, чтобы вместо этого обеспечить быстрое погружение в тему. В будущем я планирую написать ряд более описательных статей о конкретных областях компилятора.</p><p>Мы собираемся изменить компилятор Go, добавив новую (условно) языковую фичу, и собрать модифицированный компилятор, чтобы ее опробовать.</p><h3>Задача — добавление нового оператора</h3><p>Многие языки имеют оператор <code>while</code>, который в Go выражается с помощью <code>for</code>:</p><pre><code class="go">for &lt;some-condition> {
  &lt;loop body>
}</code></pre><p>Добавление оператора <code>while</code> в Go было бы тривиальным — почти такое же как и для <code>for</code> (возможно, ограничив варианты того, что может сделать этот оператор). Поэтому я выбрал немного более сложную задачу — добавить <code>until</code>. <code>until</code> это то же самое, что и <code>while</code>, за исключением того, что условие для него будет противоположным. Например, этот код:</p><pre><code class="go">i := 4
until i == 0 {
  i--
  fmt.Println("Hello, until!")
}</code></pre><p>Эквивалентен:</p><pre><code class="go">i := 4
for i != 0 {
  i--
  fmt.Println("Hello, until!")
}</code></pre><p>Мы могли бы использовать инициализатор в объявлении цикла следующим образом:</p><pre><code class="go">until i := 4; i == 0 {
  i--
  fmt.Println("Hello, until!")
}</code></pre><p>Наша реализация это поддерживает.</p><p>Обязательный дисклеймер — это просто тренировочное упражнение. Я не думаю, что добавление until в Go — это вообще хорошая идея; Минимализм Go является его преимуществом.</p><h3>Высокоуровневая структура компилятора Go </h3><p>Дефолтный компилятор Go (gc) имеет довольно традиционную структуру, которая должна быть вам знакома, если вы раньше уже работали с другими компиляторами: </p><figure class=""><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/508/4b7/6b8/5084b76b82bb43344e90040cf4b7ac76.png" width="220" height="670" data-src="https://habrastorage.org/getpro/habr/upload_files/508/4b7/6b8/5084b76b82bb43344e90040cf4b7ac76.png"/><figcaption></figcaption></figure><p>Относительно корня репозитория Go реализация компилятора находится в <code>src/cmd/compile/internal;</code> все пути кода, упомянутые далее в посте, будут относительно этого каталога. Все это написано на Go, поэтому код довольно читабелен. В этом посте мы будем рассматривать эти этапы один за другим, добавляя необходимый код для поддержки оператора <code>until</code> .</p><p>Ознакомьтесь с README в <code>src/cmd/compile</code>, где вы найдете подробное пошаговое описание этапов компиляции. Этот файл является хорошим дополнением к этой статье.</p><h3>Сканирование</h3><p>Сканер (также известный как <em>лексер</em>) разбивает текст исходного кода на отдельные элементы для компилятора. Например, слово <code>for</code> становится константой <code>_For;</code> символы <code>...</code> становятся <code>_DotDotDot</code>, а одна <code>.</code> становится <code>_Dot</code> и так далее.</p><p>Сканер реализован в пакете <code>syntax</code>. Все, что нам нужно от него здесь, это чтобы он понял новое ключевое слово — <code>until</code>. Файл <code>syntax/tokens.go</code> содержит список всех токенов, понятных компилятору, и мы добавим туда новый:</p><pre><code class="go">_Fallthrough // fallthrough
_For         // for
_Until       // until
_Func        // func</code></pre><p>Комментарий с правой стороны от константы токена не так важен, так как он используется для идентификации токена в тексте. Это делается с помощью генерации кода из <code>tokens.go</code>, в котором есть эта строка над списком токенов</p><pre><code class="go">//go:generate stringer -type token -linecomment</code></pre><p><code>go generate</code> должен быть запущен вручную а результирующий файл (<code>syntax/token_string.go</code>) отражается в репозитории исходного кода Go. Чтобы восстановить его, я выполнил следующую команду из каталога syntax:</p><pre><code class="go">GOROOT=&lt;src checkout> go generate tokens.go</code></pre><p>Настройка GOROOT очень важна по версии<a href="https://github.com/golang/go/issues/32724"> Go 1.12</a>, и должна указывать на корень исходного кода, где мы модифицируем компилятор.</p><p>Запустив генератор кода и убедившись, что <code>token_string.go</code> теперь имеет новый токен, я попытался пересобрать компилятор и столкнулся с паникой:</p><pre><code class="go">panic: imperfect hash</code></pre><p>Это происходит из этого кода в <code>syntax/scanner.go</code>:</p><pre><code class="go">// Предполагается, что длина s не меньше 2.
func hash(s []byte) uint {
  return (uint(s[0])&lt;&lt;4 ^ uint(s[1]) + uint(len(s))) &amp; uint(len(keywordMap)-1)
}

var keywordMap [1 &lt;&lt; 6]token // size must be power of two

func init() {
  // заполняем keywordMap
  for tok := _Break; tok &lt;= _Var; tok++ {
    h := hash([]byte(tok.String()))
    if keywordMap[h] != 0 {
      panic("imperfect hash")
    }
    keywordMap[h] = tok
  }
}</code></pre><p>Компилятор пытается построить "идеальную" хэш-таблицу для выполнения поиска строки ключевого слова в по токенам. Под “идеальной” подразумевается отсутствие коллизий, а только линейный массив, в котором каждое ключевое слово соответствует одному индексу. Хэш-функция довольно специфична (например, она просматривает только содержимое первых символов строкового токена), и отладить, почему новый токен создает коллизии, очень непросто. Чтобы обойти это, я увеличил размер таблицы поиска, изменив его на <code>[1 &lt;&lt; 7]token</code>, тем самым изменив размер массива поиска с 64 до 128. Это дает хэш-функции гораздо больше места для распределения своих ключей, и коллизии закончились.</p><h3>Парсинг</h3><p>Go имеет достаточно стандартный парсер с рекурсивным спуском, который преобразует поток токенов, выдаваемых сканером, в <em>конкретное синтаксическое дерево (CST)</em>. Мы начнем с добавления нового типа узла для <code>until</code> в <code>синтаксис/nodes.go</code>:</p><pre><code class="go">UntilStmt struct {
  Init SimpleStmt
  Cond Expr
  Body *BlockStmt
  stmt
}</code></pre><p>Я позаимствовал общую структуру из <code>ForStmt</code>, которая используется для циклов <code>for</code>. Как и в случае с <code>for</code>, наш <code>until</code> имеет несколько необязательных подоператоров:</p><pre><code class="go">until &lt;init>; &lt;cond> {
  &lt;body>
}</code></pre><p>И <code>&lt;init></code> и <code>&lt;cond></code> — опциональные, хотя не принято опускать <code>&lt;cond></code>. Встроенное поле UntilStmt.stmt используется для всех операторов синтаксического дерева и содержит информацию о позиции.</p><p>Сам синтаксический анализ выполняется в <code>syntax/parser.go</code>. Метод <code>parser.stmtOrNil</code> анализирует оператор в текущей позиции. Он просматривает текущий токен и принимает решение о том, какой оператор анализировать. Вот фрагмент кода, который мы добавляем:</p><pre><code class="go">switch p.tok {
case _Lbrace:
  return p.blockStmt("")

// ...

case _For:
  return p.forStmt()

case _Until:
  return p.untilStmt()</code></pre><p>И это <code>untilStmt</code>:</p><pre><code class="go">func (p *parser) untilStmt() Stmt {
  if trace {
    defer p.trace("untilStmt")()
  }

  s := new(UntilStmt)
  s.pos = p.pos()

  s.Init, s.Cond, _ = p.header(_Until)
  s.Body = p.blockStmt("until clause")

  return s
}</code></pre><p>Мы повторно используем существующий <code>parser.header</code> , который анализирует заголовок для <code>if</code> и <code>for</code> . В самом общем виде он поддерживает три части (разделенные точкой с запятой). В for третья часть может использоваться для <a href="https://golang.org/ref/spec#PostStmt">оператора «post»</a>, но мы не собираемся поддерживать это для <code>until</code>, нас интересуют только первые два. Обратите внимание, что <code>header</code> позволяет токену источника различать типы операторов, которые он обслуживает; например, он отклонил бы оператор “<code>post</code>” для <code>if</code>. Мы должны явно отклонить его и для <code>unti</code> тоже, хотя я не удосужился реализовать это прямо сейчас.</p><p>Это все изменения, которые нам нужны для парсера. Поскольку структура  <code>until</code> очень похожа на существующие операторы, мы могли бы повторно использовать большую часть функциональности.</p><p>Если мы позволяем компилятору вывести синтаксическое дерево (используя <code>syntax.Fdump</code>) после того как мы распарсили и запустились с ним:</p><pre><code class="go">i = 4
until i == 0 {
  i--
  fmt.Println("Hello, until!")
}</code></pre><p>Мы получим этот фрагмент для оператора <code>until</code>:</p><pre><code class="go">84  .  .  .  .  .  3: *syntax.UntilStmt {
 85  .  .  .  .  .  .  Init: nil
 86  .  .  .  .  .  .  Cond: *syntax.Operation {
 87  .  .  .  .  .  .  .  Op: ==
 88  .  .  .  .  .  .  .  X: i @ ./useuntil.go:13:8
 89  .  .  .  .  .  .  .  Y: *syntax.BasicLit {
 90  .  .  .  .  .  .  .  .  Value: "0"
 91  .  .  .  .  .  .  .  .  Kind: 0
 92  .  .  .  .  .  .  .  }
 93  .  .  .  .  .  .  }
 94  .  .  .  .  .  .  Body: *syntax.BlockStmt {
 95  .  .  .  .  .  .  .  List: []syntax.Stmt (2 entries) {
 96  .  .  .  .  .  .  .  .  0: *syntax.AssignStmt {
 97  .  .  .  .  .  .  .  .  .  Op: -
 98  .  .  .  .  .  .  .  .  .  Lhs: i @ ./useuntil.go:14:3
 99  .  .  .  .  .  .  .  .  .  Rhs: *(Node @ 52)
100  .  .  .  .  .  .  .  .  }
101  .  .  .  .  .  .  .  .  1: *syntax.ExprStmt {
102  .  .  .  .  .  .  .  .  .  X: *syntax.CallExpr {
103  .  .  .  .  .  .  .  .  .  .  Fun: *syntax.SelectorExpr {
104  .  .  .  .  .  .  .  .  .  .  .  X: fmt @ ./useuntil.go:15:3
105  .  .  .  .  .  .  .  .  .  .  .  Sel: Println @ ./useuntil.go:15:7
106  .  .  .  .  .  .  .  .  .  .  }
107  .  .  .  .  .  .  .  .  .  .  ArgList: []syntax.Expr (1 entries) {
108  .  .  .  .  .  .  .  .  .  .  .  0: *syntax.BasicLit {
109  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"Hello, until!\""
110  .  .  .  .  .  .  .  .  .  .  .  .  Kind: 4
111  .  .  .  .  .  .  .  .  .  .  .  }
112  .  .  .  .  .  .  .  .  .  .  }
113  .  .  .  .  .  .  .  .  .  .  HasDots: false
114  .  .  .  .  .  .  .  .  .  }
115  .  .  .  .  .  .  .  .  }
116  .  .  .  .  .  .  .  }
117  .  .  .  .  .  .  .  Rbrace: syntax.Pos {}
118  .  .  .  .  .  .  }
119  .  .  .  .  .  }</code></pre><h2>Проверка типов</h2><p>Следующим шагом в компиляции является проверка типов, которая выполняется в синтаксическом дереве и задействует пакет types2 <a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/#footnote-1">[1]</a>. В дополнение к обнаружению ошибок с типами, проверка типов в Go также включает в себя <em>выведение типов</em>, что позволяет нам писать такие операторы, как:</p><pre><code class="go">res, err := func(args)</code></pre><p>без объявления типов res и err явным образом. Средство проверки типов Go выполняет еще несколько задач, таких как связывание идентификаторов с их объявлениями и вычисление констант времени компиляции. Код находится в <code>types2/</code>. Еще раз, следуя <code>for</code>, мы добавим это предложение в свитч в методе <code>stmt</code> в <code>Checker</code>:</p><pre><code class="go">case *syntax.UntilStmt:
  inner |= breakOk | continueOk

  check.openScope(s, "until")
  defer check.closeScope()

  check.simpleStmt(s.Init)
  if s.Cond != nil {
    var x operand
    check.expr(&amp;x, s.Cond)
    if x.mode != invalid &amp;&amp; !allBoolean(x.typ) {
      check.error(s.Cond, "non-boolean condition in for statement")
    }
  }
  check.stmt(inner, s.Body)</code></pre><h3>Создание AST</h3><p>Теперь, когда у нас есть синтаксическое дерево с проверенными типами, компилятор строит <em>абстрактное синтаксическое дерево (AST)</em>. Я уже писал об <a href="https://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees">абстрактных и конкретных синтаксических деревьях</a> в предыдущих статьях — вам стоит разобраться в этой теме, если вы не знакомы с различиями. Однако в случае Go в будущем это может измениться. Компилятор Go изначально был написан на C, а затем автоматически транслирован на Go; некоторые его части являются рудиментами из старых C-дней, а некоторые новые. Будущие рефакторинги могут оставить только один тип синтаксического дерева, но на данный момент (Go 1.19) мы должны следовать этому процессу.</p><p>Код AST находится в пакете <code>ir</code>, а типы узлов определены в <code>ir/node.go</code> и <code>ir/stmt.go</code>.</p><p>Мы начнем с добавления новой константы для идентификации узла <code>until</code> в <code>ir/node.go</code>:</p><pre><code class="go">// операторы
// ...
OFALL     // fallthrough
OFOR      // for Init; Cond; Post { Body }
OUNTIL</code></pre><p>Мы снова запустим go generate, на этот раз для ir/node.go, чтобы сгенерировать строковое представление для нового типа узла:</p><pre><code class="go">// из каталога ir
GOROOT=&lt;src checkout> go generate node.go</code></pre><p>Это должно обновить файл gc/op_string.go, включив в него OUNTIL <a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/#footnote-2">[2]</a>. Еще один инструмент, который нам нужно запустить, — это mknode.go из того же каталога. Этот инструмент генерирует дополнительный код для нового узла:</p><pre><code class="go">// из каталога ir
GOROOT=&lt;src checkout> &lt;checkout/bin>go run -mod=mod mknode.go</code></pre><p>Теперь давайте определим типы узлов AST для нашего нового оператора.</p><pre><code class="go">type UntilStmt struct {
  miniStmt
  Label    *types.Sym
  Cond     Node
  Body     Nodes
  HasBreak bool
}

func NewUntilStmt(pos src.XPos, init Node, cond Node, body []Node) *UntilStmt {
  n := &amp;UntilStmt{Cond: cond}
  n.pos = pos
  n.op = OUNTIL
  if init != nil {
    n.init = []Node{init}
  }
  n.Body = body
  return n
}</code></pre><p>Нам также потребуется обновить <code>ir/fmt.go</code> , чтобы иметь возможность форматировать/выводить наш новый узел для дебага:</p><pre><code class="go">// ... добавить это в OpNamse слайс
OFOR:         "for",
OUNTIL:       "until",</code></pre><p>А также этот пункт для свича в методе <code>stmtFmt</code>:</p><pre><code class="go">case OUNTIL:
  n := n.(*UntilStmt)
  opname := "for"
  if !exportFormat {
    fmt.Fprintf(s, "%s loop", opname)
    break
  }

  fmt.Fprint(s, opname)
  if simpleinit {
    fmt.Fprintf(s, " %v;", n.Init()[0])
  }

  if n.Cond != nil {
    fmt.Fprintf(s, " %v", n.Cond)
  }

  if simpleinit {
    fmt.Fprint(s, ";")
  }

  fmt.Fprintf(s, " { %v }", n.Body)</code></pre><p>Наконец, компонент <em>noder</em> отвечает за фактическое преобразование синтаксических деревьев в AST; мы добавим этот код в <code>noder/stmt.go</code>:</p><pre><code class="go">// в метод stmt irgen...

case *syntax.ForStmt:
  return g.forStmt(stmt)
case *syntax.UntilStmt:
  return g.untilStmt(stmt)</code></pre><p>И новый метод:</p><pre><code class="go">func (g *irgen) untilStmt(stmt *syntax.UntilStmt) ir.Node {
  return ir.NewUntilStmt(g.pos(stmt), g.stmt(stmt.Init), g.expr(stmt.Cond), g.blockStmt(stmt.Body))
}</code></pre><h3>Анализ и перезапись AST</h3><p>После проверки типов компилятор проходит несколько этапов анализа и перезаписи AST. Точная последовательность изложена в функции <code>gc.Main</code> в <code>gc/main.go</code>. В номенклатуре компиляторов такие этапы обычно называют <em>проходами (passes)</em>.</p><p>Многие проходы не требуют модификаций для поддержки <code>until</code>, потому что они реагируют обобщенно на все виды операторов (здесь приходит на выручку обобщенная структура <code>gc.Node</code>). Однако некоторым все-таки это нужно. Например, escape-анализ, который пытается найти, какие переменные “сбегают” из области видимости своей функции и, следовательно, должны быть размещены в куче, а не в стеке.</p><p>Escape-анализ работает для каждого типа оператора, поэтому мы должны добавить этот пункт свича в <code>escape.stmt</code>:</p><pre><code class="go">case ir.OUNTIL:
  n := n.(*ir.UntilStmt)
  e.loopDepth++
  e.discard(n.Cond)
  e.block(n.Body)
  e.loopDepth--</code></pre><p>Теперь мы подходим к завершающему этапу основной работы с компилятором: переписываем AST. Этот шаг называется "<code>walk</code>" в номенклатуре компилятора Go. Его основная цель — разложить сложные операции на более простые, чтобы бэкенду приходилось иметь дело с меньшим количеством типов операций.</p><p>Нам придется обновить <code>walk/order.go</code>, чтобы объявить о добавленном нами новом узле AST. Он мало что делает, за исключением того, что служит сквозным каналом для трансформации:</p><pre><code class="go">case ir.OUNTIL:
  n := n.(*ir.UntilStmt)
  t := o.markTemp()
  n.Cond = o.exprInPlace(n.Cond)
  n.Body.Prepend(o.cleanTempNoPop(t)...)
  orderBlock(&amp;n.Body, o.free)
  o.out = append(o.out, n)
  o.cleanTemp(t)</code></pre><p>Остальной код <code>walk</code> собирает набор трансформаций AST, которые впоследствии помогают сократить AST до SSA. Например, он переписывает <code>range</code> в <code>for</code> на более простые формы <code>for</code> с явной переменной цикла <a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/#footnote-3">[3]</a>. Он также <a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics">переписывает доступ к map для вызовы во время выполнения</a> и делает еще многое чего полезного.</p><p>Именно здесь мы реализуем наш новый оператор <code>until</code>, превратив его в <code>for</code> с инвертированным условием.</p><p>Мы начнем с обработки новой операции в свиче в <code>walkStmt</code> (этот код находится в <code>walk/stmt.go</code>):</p><pre><code>case ir.OUNTIL:
  n := n.(*ir.UntilStmt)
  return walkUntil(n)</code></pre><p>И добавляем <code>walkUntil</code> следующим образом:</p><pre><code class="go">func walkUntil(n *ir.UntilStmt) ir.Node {
  if n.Cond != nil {
    init := ir.TakeInit(n.Cond)
    walkStmtList(init)
    n.Cond = ir.NewUnaryExpr(base.Pos, ir.ONOT, walkExpr(n.Cond, &amp;init))
    n.Cond = ir.InitExpr(init, n.Cond)
  }

  walkStmtList(n.Body)
  return ir.NewForStmt(n.Pos(), nil, n.Cond, nil, n.Body)
}</code></pre><p>Вот и все! Это перепишет узел <code>UntilStmt</code> в узел <code>ForStmt</code>, добавляя унарное логическое отрицание (по сути, !) к условию, как мы проговаривали в самом начале поста.</p><h3>Тестирование</h3><p>Теперь мы можем протестировать наш модифицированный компилятор на примере программы, которая содержит оператор <code>until</code>:</p><pre><code class="go">$ cat useuntil.go
package main

import "fmt"

func main() {
  i := 4
  until i == 0 {
    i--
    fmt.Println("Hello, until!")
  }
}

$ &lt;src checkout>/bin/go run useuntil.go
Hello, until!
Hello, until!
Hello, until!
Hello, until!</code></pre><p>Все работает!</p><p>Напоминание: <code>&lt;src checkout></code> — это каталог, в который мы извлекли Go, изменили его и скомпилировали (подробнее смотрите в Приложении).</p><h3>Заключение первой части</h3><p>На этом мы заканчиваем первую часть. Мы успешно реализовали новый оператор в компиляторе Go. Мы не рассмотрели все части компилятора, потому что мы могли сократить работу, переписав AST, чтобы вместо узлов until использовались узлы <code>for</code>. Это совершенно валидная стратегия компиляции, и компилятор Go уже имеет много подобных трансформаций для <em>канонизации</em> AST (сокращение до меньшего количества форм, чтобы на последних этапах компиляции было меньше работы). Тем не менее, мы по-прежнему заинтересованы в изучении последних двух этапов компиляции — <em>Преобразовать в SSA</em> и <em>сгенерировать машинный код</em>. Об этом мы расскажем во <a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-2/">второй части</a>.</p><h3>Приложение — сборка инструментария Go</h3><p>Пожалуйста, начните с изучения руководства по работе с <a href="https://golang.org/doc/contribute.html">Go</a>. Вот несколько быстрых заметок о воспроизведении модифицированного компилятора Go, как показано в этом посте.</p><p>Есть два пути:</p><ol><li><p>Клонировать <a href="https://github.com/golang/go">официальный репозиторий Go</a> и внести изменения, описанные в этом посте.</p></li><li><p>(рекомендуется) Клонируйте <a href="https://github.com/eliben/go">мой форк репозитория Go</a> и проверьте ветку adduntil-119-part1 , где все эти изменения уже применены вместе с некоторыми хелперами для дебага.</p></li></ol><p>Клонированный каталог — это куда указывает <code>&lt;src checkout></code> на протяжении всего поста.</p><p>Чтобы скомпилировать инструментарий, войдите в <code>src/</code> и запустите <code>./make.bash</code>. Вы также можете запустить <code>./all.bash</code> для запуска тестов после его сборки. Выполнение <code>make.bash</code> запускает полный трехэтапный процесс начальной построения Go, но даже на моем старом компьютере это занимает всего около минуты.</p><p>После сборки инструментарий устанавливается в <code>bin</code> вместе с <code>src</code>. Затем мы можем выполнить более быструю пересборку самого компилятора, запустив <code>bin/go install cmd/compile</code>.</p><hr/><p><a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/#footnote-reference-1">[1]</a>  Пакет types2 — это порт (на внутренние структуры данных компилятора) алгоритмов проверки типов в go/types. Он синхронизируется с go/types.  </p><p><a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/#footnote-reference-2">[2]</a> Если вы просмотрите эту и связанные с ней части кода компилятора, вы заметите, что есть еще один опкод под названием OFORUNTIL. Этот узел реализует цикл <code>for</code>, в котором условие проверяется в конце итерации; он используется внутри компилятора для преобразования некоторых циклов и недоступен программистам Go. Мы проигнорируем это в целях этой статьи.  </p><p><a href="https://eli.thegreenplace.net/2019/go-compiler-internals-adding-a-new-statement-to-go-part-1/#footnote-reference-3">[3]</a> В Go есть несколько специальных “волшебных” операторов range, таких как range по строке, который разбивает ее на руны. Вот где реализованы такие трансформации.  </p><hr/><p>В ближайший час состоится открытое занятие по внутреннему устройству каналов Go. На занятии вы узнаете:<br/>- что происходит под капотом, когда Go работает с каналами;<br/>- когда каналы без буфера лучше, чем с буфером;<br/>- и как записать данные из одной горутины в стэк другой.<br/>Если интересно, заходите <a href="https://otus.pw/rRG9/">по ссылке.</a></p><p></p></div></div></div> <!----> <!----></div> <!----> <!----></div> <!----> <div class="tm-article-presenter__meta"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bgo%5D" class="tm-tags-list__link">go</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bgolang%5D" class="tm-tags-list__link">golang</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%20%D0%B2%20go%5D" class="tm-tags-list__link">оператор в go</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80%20go%5D" class="tm-tags-list__link">компилятор go</a></li></ul></div> <div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/ru/company/otus/blog/" class="tm-hubs-list__link router-link-active">Блог компании OTUS</a></li><li class="tm-separated-list__item"><a href="/ru/hub/programming/" class="tm-hubs-list__link">Программирование</a></li><li class="tm-separated-list__item"><a href="/ru/hub/go/" class="tm-hubs-list__link">Go</a></li></ul></div></div></article></div> <!----></div> <div class="tm-article-sticky-panel"><div class="tm-data-icons tm-article-sticky-panel__icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg height="24" width="24" class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article"><title>Всего голосов 18: ↑15 и ↓3</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-rating"></use></svg> <span title="Всего голосов 18: ↑15 и ↓3" class="tm-votes-meter__value tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating">+12</span></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----> <!----> <button title="Добавить в закладки" type="button" class="bookmarks-button tm-data-icons__item"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Добавить в закладки</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-favorite"></use></svg></span> <span title="Количество пользователей, добавивших публикацию в закладки" class="bookmarks-button__counter">
    53
  </span></button> <div title="Читать комментарии" class="tm-article-comments-counter-link tm-data-icons__item"><a href="/ru/company/otus/blog/706942/comments/" class="tm-article-comments-counter-link__link"><svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value">
      2
    </span></a> <!----></div> <div title="Поделиться" class="tm-sharing tm-data-icons__item"><button type="button" class="tm-sharing__button"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button> <DIV class="v-portal" style="display:none;"></DIV></div> <DIV class="v-portal" style="display:none;"></DIV></div> </div></div> <DIV class="v-portal" style="display:none;"></DIV> <div class="tm-article-presenter__footer"><div class="tm-article-blocks"><!----> <div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><!----> <div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><div class="tm-article-author"><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/company/otus/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" height="40" src="//habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png" width="40" class="tm-entity-image__pic"></div></a> <div class="tm-company-snippet__info"><a href="/ru/company/otus/profile/" class="tm-company-snippet__title">OTUS</a> <div class="tm-company-snippet__description">Цифровые навыки от ведущих экспертов</div></div></div> <div class="tm-article-author__buttons"><!----> <!----></div></div> <div class="tm-article-author__company-contacts"><a href="https://otus.ru" rel="noopener" target="_blank" class="tm-article-author__contact">
      Сайт
    </a><a href="https://vk.com/club145052891" rel="noopener" target="_blank" class="tm-article-author__contact">
      ВКонтакте
    </a><a href="https://telegram.me/Otusjava" rel="noopener" target="_blank" class="tm-article-author__contact">
      Telegram
    </a></div> <div class="tm-article-author__separator"></div></div> <div class="tm-user-card tm-article-author__user-card tm-user-card tm-user-card_variant-article"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/MaxRokatansky/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" src="//habrastorage.org/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg" class="tm-entity-image__pic"></div></a> <div class="tm-user-card__meta"><div title=" 861 голос " class="tm-counter-container tm-karma tm-karma"><div class="tm-counter-container__header"><div class="tm-karma__votes tm-karma__votes_positive">
      51
    </div></div> <div class="tm-counter-container__footer"><div class="tm-karma__text">
      Карма
    </div> <DIV class="v-portal" style="display:none;"></DIV></div></div> <div title="Рейтинг пользователя" class="tm-counter-container"><div class="tm-counter-container__header"> <div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----> <div class="tm-votes-lever__score tm-votes-lever__score tm-votes-lever__score_appearance-rating"><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter tm-votes-lever__score-counter_rating">
        104.4
      </span></div> <!----></div></div> <div class="tm-counter-container__footer"><span class="tm-rating__text tm-rating__text">
      Рейтинг
    </span></div></div></div></div></div> <div class="tm-user-card__info tm-user-card__info tm-user-card__info_variant-article"><div class="tm-user-card__title tm-user-card__title tm-user-card__title_variant-article"><span class="tm-user-card__name tm-user-card__name tm-user-card__name_variant-article">OTUS</span> <a href="/ru/users/MaxRokatansky/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article">
          @MaxRokatansky
        </a> <!----></div> <p class="tm-user-card__short-info tm-user-card__short-info tm-user-card__short-info_variant-article">Редактор</p></div></div> <div class="tm-user-card__buttons tm-user-card__buttons tm-user-card__buttons_variant-article"><!----> <!----> <!----> <!----> <!----></div></div> <!----></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----></section> <!----> <div class="tm-article-blocks__comments"><div class="tm-article-page-comments"><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/company/otus/blog/706942/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style"><svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted">
       Комментарии 2 
    </span></a> <!----></div></div></div>  <section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2> </div> <!----></header> <div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><div class="tm-tabs tm-tabs"><div><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim">
        Лучшие за сутки
      </button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_slim">
        Похожие
      </button></span></div> <!----></div> <div class="similar-and-daily__tab-view"><div><!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <div class="tm-placeholder-article-cards"><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div></div> <!----> <!----> <!----> <!----></div> <!----></div></div> <!----></section> <div><!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div> <div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li></ul></div> <div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div> <!----> <!----> <!----> <!----> <!----> <!----></div> <!----> </div></div></div></div></div> <div class="tm-page__sidebar"><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div> <div class="tm-sexy-sidebar tm-sexy-sidebar_initial" style="margin-top:0px;"><!----> <section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2> </div> <!----></header> <div class="tm-block__body tm-block__body"><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title tm-description-list__title_variant-columns-nowrap">Сайт</dt> <dd class="tm-description-list__body tm-description-list__body tm-description-list__body_variant-columns-nowrap"><a href="https://otus.ru" target="_blank" class="tm-company-basic-info__link">
      otus.ru
    </a></dd></dl> <dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title tm-description-list__title_variant-columns-nowrap">Дата регистрации</dt> <dd class="tm-description-list__body tm-description-list__body tm-description-list__body_variant-columns-nowrap"><time datetime="2017-03-22T08:17:26.000Z" title="2017-03-22, 11:17">22  марта  2017</time></dd></dl> <dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title tm-description-list__title_variant-columns-nowrap">Дата основания</dt> <dd class="tm-description-list__body tm-description-list__body tm-description-list__body_variant-columns-nowrap"><time datetime="2017-03-31T21:00:00.000Z" title="2017-04-01, 00:00">1  апреля  2017</time></dd></dl> <dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title tm-description-list__title_variant-columns-nowrap">Численность</dt> <dd class="tm-description-list__body tm-description-list__body tm-description-list__body_variant-columns-nowrap">
    51–100 человек
  </dd></dl> <dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title tm-description-list__title_variant-columns-nowrap">Местоположение</dt> <dd class="tm-description-list__body tm-description-list__body tm-description-list__body_variant-columns-nowrap">
    Россия
  </dd></dl> <dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title tm-description-list__title_variant-columns-nowrap">Представитель</dt> <dd class="tm-description-list__body tm-description-list__body tm-description-list__body_variant-columns-nowrap"><a href="/ru/users/MaxRokatansky/" class="tm-company-basic-info__link">
      OTUS
    </a></dd></dl></div></div> <!----></section> <div class="tm-company-widgets"></div> <!----> <!----> <!----></div></div></div></div></div></div></main> <!----></div> <div class="tm-footer-menu"><div class="tm-page-width"><div class="tm-footer-menu__container"><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">
          Ваш аккаунт
        </p> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/company/otus/blog/706942/&amp;hl=ru" rel="nofollow" target="_self">
                Войти
              </a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/company/otus/blog/706942/&amp;hl=ru" rel="nofollow" target="_self">
                Регистрация
              </a></li></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">
          Разделы
        </p> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="/ru/" class="footer-menu__item-link router-link-active">
                Публикации
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/news/" class="footer-menu__item-link">
                Новости
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/hubs/" class="footer-menu__item-link">
                Хабы
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/companies/" class="footer-menu__item-link">
                Компании
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/users/" class="footer-menu__item-link">
                Авторы
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/sandbox/" class="footer-menu__item-link">
                Песочница
              </a></li></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">
          Информация
        </p> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="/ru/docs/help/" class="footer-menu__item-link">
                Устройство сайта
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/docs/authors/codex/" class="footer-menu__item-link">
                Для авторов
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/docs/companies/corpblogs/" class="footer-menu__item-link">
                Для компаний
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/docs/docs/transparency/" class="footer-menu__item-link">
                Документы
              </a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement" target="_blank">
                Соглашение
              </a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/" target="_blank">
                Конфиденциальность
              </a></li></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">
          Услуги
        </p> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">
                Корпоративный блог
              </a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">
                Медийная реклама
              </a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">
                Нативные проекты
              </a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">
                Образовательные программы
              </a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">
                Стартапам
              </a></li><li class="tm-footer-menu__list-item"><a href="/ru/megaprojects/" class="footer-menu__item-link">
                Мегапроекты
              </a></li></ul></div></div></div></div></div> <div class="tm-footer"><div class="tm-page-width"><div class="tm-footer__container"><!----> <div class="tm-footer__social"><a href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Facebook</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Twitter</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>VK</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-vkontakte"></use></svg></a><a href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Telegram</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Youtube</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a href="https://zen.yandex.ru/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Яндекс Дзен</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-zen"></use></svg></a></div> <DIV class="v-portal" style="display:none;"></DIV> <button class="tm-footer__link"><!---->
        Настройка языка
      </button> <a href="/ru/feedback/" class="tm-footer__link">
        Техническая поддержка
      </a> <a href="/berserk-mode-nope" class="tm-footer__link">
        Вернуться на старую версию
      </a> <div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2023, </span> <span class="tm-copyright__name"><a href="https://company.habr.com/" rel="noopener" target="_blank" class="tm-copyright__link">Habr</a></span></span></div></div></div></div> <!----> <!----></div> <div class="vue-portal-target"></div></div>
<script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"706942":{"id":"706942","timePublished":"2022-12-21T16:27:11+00:00","isCorporative":true,"lang":"ru","titleHtml":"Под капотом у компилятора Go: добавление нового оператора в Go — часть 1","leadData":{"textHtml":"\u003Cp\u003EЭто первая статья из серии из двух частей, в которой мы в форме туториала изучаем компилятор Go. Компилятор большой, и для его корректного описания потребовалась бы целая книга, поэтому идея этих постов заключается в том, чтобы вместо этого обеспечить быстрое погружение в тему. В будущем я планирую написать ряд более описательных статей о конкретных областях компилятора.\u003C\u002Fp\u003E\u003Cp\u003EМы собираемся изменить компилятор Go, добавив новую (условно) языковую фичу, и собрать модифицированный компилятор, чтобы ее опробовать.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F608\u002F076\u002Fa17\u002F608076a1757dfbce83231141a70a89ad.png","buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F608\u002F076\u002Fa17\u002F608076a1757dfbce83231141a70a89ad.png","fit":"cover","positionY":0,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[{"type":"translation","data":{"originalAuthorName":"eli.thegreenplace.net","originalUrl":"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F"}}],"author":{"id":"1547287","alias":"MaxRokatansky","fullname":"OTUS","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fb9f\u002Fbaf\u002F5f9\u002Fb9fbaf5f96ae52973706a0716bd9216e.jpg","speciality":"Редактор","scoreStats":{"score":51,"votesCount":861},"rating":104.4,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null}},"statistics":{"commentsCount":2,"favoritesCount":53,"readingCount":6247,"score":12,"votesCount":18,"votesCountPlus":15,"votesCountMinus":3},"hubs":[{"id":"21052","alias":"otus","type":"corporative","title":"Блог компании OTUS","titleHtml":"Блог компании OTUS","isProfiled":false,"relatedData":null},{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null},{"id":"17748","alias":"go","type":"collective","title":"Go","titleHtml":"Go","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":null,"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003E\u003Cstrong\u003EОбновление от 2022-08-09:\u003C\u002Fstrong\u003E процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19.\u003C\u002Fp\u003E\u003Cp\u003EЭто первая статья из серии из двух частей, в которой мы в форме туториала изучаем компилятор Go. Компилятор большой, и для его корректного описания потребовалась бы целая книга, поэтому идея этих постов заключается в том, чтобы вместо этого обеспечить быстрое погружение в тему. В будущем я планирую написать ряд более описательных статей о конкретных областях компилятора.\u003C\u002Fp\u003E\u003Cp\u003EМы собираемся изменить компилятор Go, добавив новую (условно) языковую фичу, и собрать модифицированный компилятор, чтобы ее опробовать.\u003C\u002Fp\u003E\u003Ch3\u003EЗадача — добавление нового оператора\u003C\u002Fh3\u003E\u003Cp\u003EМногие языки имеют оператор \u003Ccode\u003Ewhile\u003C\u002Fcode\u003E, который в Go выражается с помощью \u003Ccode\u003Efor\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efor &lt;some-condition\u003E {\n  &lt;loop body\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EДобавление оператора \u003Ccode\u003Ewhile\u003C\u002Fcode\u003E в Go было бы тривиальным — почти такое же как и для \u003Ccode\u003Efor\u003C\u002Fcode\u003E (возможно, ограничив варианты того, что может сделать этот оператор). Поэтому я выбрал немного более сложную задачу — добавить \u003Ccode\u003Euntil\u003C\u002Fcode\u003E. \u003Ccode\u003Euntil\u003C\u002Fcode\u003E это то же самое, что и \u003Ccode\u003Ewhile\u003C\u002Fcode\u003E, за исключением того, что условие для него будет противоположным. Например, этот код:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ei := 4\nuntil i == 0 {\n  i--\n  fmt.Println(\"Hello, until!\")\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭквивалентен:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ei := 4\nfor i != 0 {\n  i--\n  fmt.Println(\"Hello, until!\")\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМы могли бы использовать инициализатор в объявлении цикла следующим образом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Euntil i := 4; i == 0 {\n  i--\n  fmt.Println(\"Hello, until!\")\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНаша реализация это поддерживает.\u003C\u002Fp\u003E\u003Cp\u003EОбязательный дисклеймер — это просто тренировочное упражнение. Я не думаю, что добавление until в Go — это вообще хорошая идея; Минимализм Go является его преимуществом.\u003C\u002Fp\u003E\u003Ch3\u003EВысокоуровневая структура компилятора Go \u003C\u002Fh3\u003E\u003Cp\u003EДефолтный компилятор Go (gc) имеет довольно традиционную структуру, которая должна быть вам знакома, если вы раньше уже работали с другими компиляторами: \u003C\u002Fp\u003E\u003Cfigure class=\"\"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F508\u002F4b7\u002F6b8\u002F5084b76b82bb43344e90040cf4b7ac76.png\" width=\"220\" height=\"670\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F508\u002F4b7\u002F6b8\u002F5084b76b82bb43344e90040cf4b7ac76.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EОтносительно корня репозитория Go реализация компилятора находится в \u003Ccode\u003Esrc\u002Fcmd\u002Fcompile\u002Finternal;\u003C\u002Fcode\u003E все пути кода, упомянутые далее в посте, будут относительно этого каталога. Все это написано на Go, поэтому код довольно читабелен. В этом посте мы будем рассматривать эти этапы один за другим, добавляя необходимый код для поддержки оператора \u003Ccode\u003Euntil\u003C\u002Fcode\u003E .\u003C\u002Fp\u003E\u003Cp\u003EОзнакомьтесь с README в \u003Ccode\u003Esrc\u002Fcmd\u002Fcompile\u003C\u002Fcode\u003E, где вы найдете подробное пошаговое описание этапов компиляции. Этот файл является хорошим дополнением к этой статье.\u003C\u002Fp\u003E\u003Ch3\u003EСканирование\u003C\u002Fh3\u003E\u003Cp\u003EСканер (также известный как \u003Cem\u003Eлексер\u003C\u002Fem\u003E) разбивает текст исходного кода на отдельные элементы для компилятора. Например, слово \u003Ccode\u003Efor\u003C\u002Fcode\u003E становится константой \u003Ccode\u003E_For;\u003C\u002Fcode\u003E символы \u003Ccode\u003E...\u003C\u002Fcode\u003E становятся \u003Ccode\u003E_DotDotDot\u003C\u002Fcode\u003E, а одна \u003Ccode\u003E.\u003C\u002Fcode\u003E становится \u003Ccode\u003E_Dot\u003C\u002Fcode\u003E и так далее.\u003C\u002Fp\u003E\u003Cp\u003EСканер реализован в пакете \u003Ccode\u003Esyntax\u003C\u002Fcode\u003E. Все, что нам нужно от него здесь, это чтобы он понял новое ключевое слово — \u003Ccode\u003Euntil\u003C\u002Fcode\u003E. Файл \u003Ccode\u003Esyntax\u002Ftokens.go\u003C\u002Fcode\u003E содержит список всех токенов, понятных компилятору, и мы добавим туда новый:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E_Fallthrough \u002F\u002F fallthrough\n_For         \u002F\u002F for\n_Until       \u002F\u002F until\n_Func        \u002F\u002F func\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКомментарий с правой стороны от константы токена не так важен, так как он используется для идентификации токена в тексте. Это делается с помощью генерации кода из \u003Ccode\u003Etokens.go\u003C\u002Fcode\u003E, в котором есть эта строка над списком токенов\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002Fgo:generate stringer -type token -linecomment\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003Ego generate\u003C\u002Fcode\u003E должен быть запущен вручную а результирующий файл (\u003Ccode\u003Esyntax\u002Ftoken_string.go\u003C\u002Fcode\u003E) отражается в репозитории исходного кода Go. Чтобы восстановить его, я выполнил следующую команду из каталога syntax:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003EGOROOT=&lt;src checkout\u003E go generate tokens.go\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНастройка GOROOT очень важна по версии\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fgolang\u002Fgo\u002Fissues\u002F32724\"\u003E Go 1.12\u003C\u002Fa\u003E, и должна указывать на корень исходного кода, где мы модифицируем компилятор.\u003C\u002Fp\u003E\u003Cp\u003EЗапустив генератор кода и убедившись, что \u003Ccode\u003Etoken_string.go\u003C\u002Fcode\u003E теперь имеет новый токен, я попытался пересобрать компилятор и столкнулся с паникой:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Epanic: imperfect hash\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто происходит из этого кода в \u003Ccode\u003Esyntax\u002Fscanner.go\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F Предполагается, что длина s не меньше 2.\nfunc hash(s []byte) uint {\n  return (uint(s[0])&lt;&lt;4 ^ uint(s[1]) + uint(len(s))) &amp; uint(len(keywordMap)-1)\n}\n\nvar keywordMap [1 &lt;&lt; 6]token \u002F\u002F size must be power of two\n\nfunc init() {\n  \u002F\u002F заполняем keywordMap\n  for tok := _Break; tok &lt;= _Var; tok++ {\n    h := hash([]byte(tok.String()))\n    if keywordMap[h] != 0 {\n      panic(\"imperfect hash\")\n    }\n    keywordMap[h] = tok\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКомпилятор пытается построить \"идеальную\" хэш-таблицу для выполнения поиска строки ключевого слова в по токенам. Под “идеальной” подразумевается отсутствие коллизий, а только линейный массив, в котором каждое ключевое слово соответствует одному индексу. Хэш-функция довольно специфична (например, она просматривает только содержимое первых символов строкового токена), и отладить, почему новый токен создает коллизии, очень непросто. Чтобы обойти это, я увеличил размер таблицы поиска, изменив его на \u003Ccode\u003E[1 &lt;&lt; 7]token\u003C\u002Fcode\u003E, тем самым изменив размер массива поиска с 64 до 128. Это дает хэш-функции гораздо больше места для распределения своих ключей, и коллизии закончились.\u003C\u002Fp\u003E\u003Ch3\u003EПарсинг\u003C\u002Fh3\u003E\u003Cp\u003EGo имеет достаточно стандартный парсер с рекурсивным спуском, который преобразует поток токенов, выдаваемых сканером, в \u003Cem\u003Eконкретное синтаксическое дерево (CST)\u003C\u002Fem\u003E. Мы начнем с добавления нового типа узла для \u003Ccode\u003Euntil\u003C\u002Fcode\u003E в \u003Ccode\u003Eсинтаксис\u002Fnodes.go\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003EUntilStmt struct {\n  Init SimpleStmt\n  Cond Expr\n  Body *BlockStmt\n  stmt\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЯ позаимствовал общую структуру из \u003Ccode\u003EForStmt\u003C\u002Fcode\u003E, которая используется для циклов \u003Ccode\u003Efor\u003C\u002Fcode\u003E. Как и в случае с \u003Ccode\u003Efor\u003C\u002Fcode\u003E, наш \u003Ccode\u003Euntil\u003C\u002Fcode\u003E имеет несколько необязательных подоператоров:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Euntil &lt;init\u003E; &lt;cond\u003E {\n  &lt;body\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ \u003Ccode\u003E&lt;init\u003E\u003C\u002Fcode\u003E и \u003Ccode\u003E&lt;cond\u003E\u003C\u002Fcode\u003E — опциональные, хотя не принято опускать \u003Ccode\u003E&lt;cond\u003E\u003C\u002Fcode\u003E. Встроенное поле UntilStmt.stmt используется для всех операторов синтаксического дерева и содержит информацию о позиции.\u003C\u002Fp\u003E\u003Cp\u003EСам синтаксический анализ выполняется в \u003Ccode\u003Esyntax\u002Fparser.go\u003C\u002Fcode\u003E. Метод \u003Ccode\u003Eparser.stmtOrNil\u003C\u002Fcode\u003E анализирует оператор в текущей позиции. Он просматривает текущий токен и принимает решение о том, какой оператор анализировать. Вот фрагмент кода, который мы добавляем:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Eswitch p.tok {\ncase _Lbrace:\n  return p.blockStmt(\"\")\n\n\u002F\u002F ...\n\ncase _For:\n  return p.forStmt()\n\ncase _Until:\n  return p.untilStmt()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ это \u003Ccode\u003EuntilStmt\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc (p *parser) untilStmt() Stmt {\n  if trace {\n    defer p.trace(\"untilStmt\")()\n  }\n\n  s := new(UntilStmt)\n  s.pos = p.pos()\n\n  s.Init, s.Cond, _ = p.header(_Until)\n  s.Body = p.blockStmt(\"until clause\")\n\n  return s\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМы повторно используем существующий \u003Ccode\u003Eparser.header\u003C\u002Fcode\u003E , который анализирует заголовок для \u003Ccode\u003Eif\u003C\u002Fcode\u003E и \u003Ccode\u003Efor\u003C\u002Fcode\u003E . В самом общем виде он поддерживает три части (разделенные точкой с запятой). В for третья часть может использоваться для \u003Ca href=\"https:\u002F\u002Fgolang.org\u002Fref\u002Fspec#PostStmt\"\u003Eоператора «post»\u003C\u002Fa\u003E, но мы не собираемся поддерживать это для \u003Ccode\u003Euntil\u003C\u002Fcode\u003E, нас интересуют только первые два. Обратите внимание, что \u003Ccode\u003Eheader\u003C\u002Fcode\u003E позволяет токену источника различать типы операторов, которые он обслуживает; например, он отклонил бы оператор “\u003Ccode\u003Epost\u003C\u002Fcode\u003E” для \u003Ccode\u003Eif\u003C\u002Fcode\u003E. Мы должны явно отклонить его и для \u003Ccode\u003Eunti\u003C\u002Fcode\u003E тоже, хотя я не удосужился реализовать это прямо сейчас.\u003C\u002Fp\u003E\u003Cp\u003EЭто все изменения, которые нам нужны для парсера. Поскольку структура  \u003Ccode\u003Euntil\u003C\u002Fcode\u003E очень похожа на существующие операторы, мы могли бы повторно использовать большую часть функциональности.\u003C\u002Fp\u003E\u003Cp\u003EЕсли мы позволяем компилятору вывести синтаксическое дерево (используя \u003Ccode\u003Esyntax.Fdump\u003C\u002Fcode\u003E) после того как мы распарсили и запустились с ним:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ei = 4\nuntil i == 0 {\n  i--\n  fmt.Println(\"Hello, until!\")\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМы получим этот фрагмент для оператора \u003Ccode\u003Euntil\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E84  .  .  .  .  .  3: *syntax.UntilStmt {\n 85  .  .  .  .  .  .  Init: nil\n 86  .  .  .  .  .  .  Cond: *syntax.Operation {\n 87  .  .  .  .  .  .  .  Op: ==\n 88  .  .  .  .  .  .  .  X: i @ .\u002Fuseuntil.go:13:8\n 89  .  .  .  .  .  .  .  Y: *syntax.BasicLit {\n 90  .  .  .  .  .  .  .  .  Value: \"0\"\n 91  .  .  .  .  .  .  .  .  Kind: 0\n 92  .  .  .  .  .  .  .  }\n 93  .  .  .  .  .  .  }\n 94  .  .  .  .  .  .  Body: *syntax.BlockStmt {\n 95  .  .  .  .  .  .  .  List: []syntax.Stmt (2 entries) {\n 96  .  .  .  .  .  .  .  .  0: *syntax.AssignStmt {\n 97  .  .  .  .  .  .  .  .  .  Op: -\n 98  .  .  .  .  .  .  .  .  .  Lhs: i @ .\u002Fuseuntil.go:14:3\n 99  .  .  .  .  .  .  .  .  .  Rhs: *(Node @ 52)\n100  .  .  .  .  .  .  .  .  }\n101  .  .  .  .  .  .  .  .  1: *syntax.ExprStmt {\n102  .  .  .  .  .  .  .  .  .  X: *syntax.CallExpr {\n103  .  .  .  .  .  .  .  .  .  .  Fun: *syntax.SelectorExpr {\n104  .  .  .  .  .  .  .  .  .  .  .  X: fmt @ .\u002Fuseuntil.go:15:3\n105  .  .  .  .  .  .  .  .  .  .  .  Sel: Println @ .\u002Fuseuntil.go:15:7\n106  .  .  .  .  .  .  .  .  .  .  }\n107  .  .  .  .  .  .  .  .  .  .  ArgList: []syntax.Expr (1 entries) {\n108  .  .  .  .  .  .  .  .  .  .  .  0: *syntax.BasicLit {\n109  .  .  .  .  .  .  .  .  .  .  .  .  Value: \"\\\"Hello, until!\\\"\"\n110  .  .  .  .  .  .  .  .  .  .  .  .  Kind: 4\n111  .  .  .  .  .  .  .  .  .  .  .  }\n112  .  .  .  .  .  .  .  .  .  .  }\n113  .  .  .  .  .  .  .  .  .  .  HasDots: false\n114  .  .  .  .  .  .  .  .  .  }\n115  .  .  .  .  .  .  .  .  }\n116  .  .  .  .  .  .  .  }\n117  .  .  .  .  .  .  .  Rbrace: syntax.Pos {}\n118  .  .  .  .  .  .  }\n119  .  .  .  .  .  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003EПроверка типов\u003C\u002Fh2\u003E\u003Cp\u003EСледующим шагом в компиляции является проверка типов, которая выполняется в синтаксическом дереве и задействует пакет types2 \u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F#footnote-1\"\u003E[1]\u003C\u002Fa\u003E. В дополнение к обнаружению ошибок с типами, проверка типов в Go также включает в себя \u003Cem\u003Eвыведение типов\u003C\u002Fem\u003E, что позволяет нам писать такие операторы, как:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Eres, err := func(args)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eбез объявления типов res и err явным образом. Средство проверки типов Go выполняет еще несколько задач, таких как связывание идентификаторов с их объявлениями и вычисление констант времени компиляции. Код находится в \u003Ccode\u003Etypes2\u002F\u003C\u002Fcode\u003E. Еще раз, следуя \u003Ccode\u003Efor\u003C\u002Fcode\u003E, мы добавим это предложение в свитч в методе \u003Ccode\u003Estmt\u003C\u002Fcode\u003E в \u003Ccode\u003EChecker\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ecase *syntax.UntilStmt:\n  inner |= breakOk | continueOk\n\n  check.openScope(s, \"until\")\n  defer check.closeScope()\n\n  check.simpleStmt(s.Init)\n  if s.Cond != nil {\n    var x operand\n    check.expr(&amp;x, s.Cond)\n    if x.mode != invalid &amp;&amp; !allBoolean(x.typ) {\n      check.error(s.Cond, \"non-boolean condition in for statement\")\n    }\n  }\n  check.stmt(inner, s.Body)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003EСоздание AST\u003C\u002Fh3\u003E\u003Cp\u003EТеперь, когда у нас есть синтаксическое дерево с проверенными типами, компилятор строит \u003Cem\u003Eабстрактное синтаксическое дерево (AST)\u003C\u002Fem\u003E. Я уже писал об \u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2009\u002F02\u002F16\u002Fabstract-vs-concrete-syntax-trees\"\u003Eабстрактных и конкретных синтаксических деревьях\u003C\u002Fa\u003E в предыдущих статьях — вам стоит разобраться в этой теме, если вы не знакомы с различиями. Однако в случае Go в будущем это может измениться. Компилятор Go изначально был написан на C, а затем автоматически транслирован на Go; некоторые его части являются рудиментами из старых C-дней, а некоторые новые. Будущие рефакторинги могут оставить только один тип синтаксического дерева, но на данный момент (Go 1.19) мы должны следовать этому процессу.\u003C\u002Fp\u003E\u003Cp\u003EКод AST находится в пакете \u003Ccode\u003Eir\u003C\u002Fcode\u003E, а типы узлов определены в \u003Ccode\u003Eir\u002Fnode.go\u003C\u002Fcode\u003E и \u003Ccode\u003Eir\u002Fstmt.go\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EМы начнем с добавления новой константы для идентификации узла \u003Ccode\u003Euntil\u003C\u002Fcode\u003E в \u003Ccode\u003Eir\u002Fnode.go\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F операторы\n\u002F\u002F ...\nOFALL     \u002F\u002F fallthrough\nOFOR      \u002F\u002F for Init; Cond; Post { Body }\nOUNTIL\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМы снова запустим go generate, на этот раз для ir\u002Fnode.go, чтобы сгенерировать строковое представление для нового типа узла:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F из каталога ir\nGOROOT=&lt;src checkout\u003E go generate node.go\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто должно обновить файл gc\u002Fop_string.go, включив в него OUNTIL \u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F#footnote-2\"\u003E[2]\u003C\u002Fa\u003E. Еще один инструмент, который нам нужно запустить, — это mknode.go из того же каталога. Этот инструмент генерирует дополнительный код для нового узла:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F из каталога ir\nGOROOT=&lt;src checkout\u003E &lt;checkout\u002Fbin\u003Ego run -mod=mod mknode.go\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь давайте определим типы узлов AST для нашего нового оператора.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Etype UntilStmt struct {\n  miniStmt\n  Label    *types.Sym\n  Cond     Node\n  Body     Nodes\n  HasBreak bool\n}\n\nfunc NewUntilStmt(pos src.XPos, init Node, cond Node, body []Node) *UntilStmt {\n  n := &amp;UntilStmt{Cond: cond}\n  n.pos = pos\n  n.op = OUNTIL\n  if init != nil {\n    n.init = []Node{init}\n  }\n  n.Body = body\n  return n\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНам также потребуется обновить \u003Ccode\u003Eir\u002Ffmt.go\u003C\u002Fcode\u003E , чтобы иметь возможность форматировать\u002Fвыводить наш новый узел для дебага:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F ... добавить это в OpNamse слайс\nOFOR:         \"for\",\nOUNTIL:       \"until\",\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EА также этот пункт для свича в методе \u003Ccode\u003EstmtFmt\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ecase OUNTIL:\n  n := n.(*UntilStmt)\n  opname := \"for\"\n  if !exportFormat {\n    fmt.Fprintf(s, \"%s loop\", opname)\n    break\n  }\n\n  fmt.Fprint(s, opname)\n  if simpleinit {\n    fmt.Fprintf(s, \" %v;\", n.Init()[0])\n  }\n\n  if n.Cond != nil {\n    fmt.Fprintf(s, \" %v\", n.Cond)\n  }\n\n  if simpleinit {\n    fmt.Fprint(s, \";\")\n  }\n\n  fmt.Fprintf(s, \" { %v }\", n.Body)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНаконец, компонент \u003Cem\u003Enoder\u003C\u002Fem\u003E отвечает за фактическое преобразование синтаксических деревьев в AST; мы добавим этот код в \u003Ccode\u003Enoder\u002Fstmt.go\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F в метод stmt irgen...\n\ncase *syntax.ForStmt:\n  return g.forStmt(stmt)\ncase *syntax.UntilStmt:\n  return g.untilStmt(stmt)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ новый метод:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc (g *irgen) untilStmt(stmt *syntax.UntilStmt) ir.Node {\n  return ir.NewUntilStmt(g.pos(stmt), g.stmt(stmt.Init), g.expr(stmt.Cond), g.blockStmt(stmt.Body))\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003EАнализ и перезапись AST\u003C\u002Fh3\u003E\u003Cp\u003EПосле проверки типов компилятор проходит несколько этапов анализа и перезаписи AST. Точная последовательность изложена в функции \u003Ccode\u003Egc.Main\u003C\u002Fcode\u003E в \u003Ccode\u003Egc\u002Fmain.go\u003C\u002Fcode\u003E. В номенклатуре компиляторов такие этапы обычно называют \u003Cem\u003Eпроходами (passes)\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\u003Cp\u003EМногие проходы не требуют модификаций для поддержки \u003Ccode\u003Euntil\u003C\u002Fcode\u003E, потому что они реагируют обобщенно на все виды операторов (здесь приходит на выручку обобщенная структура \u003Ccode\u003Egc.Node\u003C\u002Fcode\u003E). Однако некоторым все-таки это нужно. Например, escape-анализ, который пытается найти, какие переменные “сбегают” из области видимости своей функции и, следовательно, должны быть размещены в куче, а не в стеке.\u003C\u002Fp\u003E\u003Cp\u003EEscape-анализ работает для каждого типа оператора, поэтому мы должны добавить этот пункт свича в \u003Ccode\u003Eescape.stmt\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ecase ir.OUNTIL:\n  n := n.(*ir.UntilStmt)\n  e.loopDepth++\n  e.discard(n.Cond)\n  e.block(n.Body)\n  e.loopDepth--\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь мы подходим к завершающему этапу основной работы с компилятором: переписываем AST. Этот шаг называется \"\u003Ccode\u003Ewalk\u003C\u002Fcode\u003E\" в номенклатуре компилятора Go. Его основная цель — разложить сложные операции на более простые, чтобы бэкенду приходилось иметь дело с меньшим количеством типов операций.\u003C\u002Fp\u003E\u003Cp\u003EНам придется обновить \u003Ccode\u003Ewalk\u002Forder.go\u003C\u002Fcode\u003E, чтобы объявить о добавленном нами новом узле AST. Он мало что делает, за исключением того, что служит сквозным каналом для трансформации:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Ecase ir.OUNTIL:\n  n := n.(*ir.UntilStmt)\n  t := o.markTemp()\n  n.Cond = o.exprInPlace(n.Cond)\n  n.Body.Prepend(o.cleanTempNoPop(t)...)\n  orderBlock(&amp;n.Body, o.free)\n  o.out = append(o.out, n)\n  o.cleanTemp(t)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EОстальной код \u003Ccode\u003Ewalk\u003C\u002Fcode\u003E собирает набор трансформаций AST, которые впоследствии помогают сократить AST до SSA. Например, он переписывает \u003Ccode\u003Erange\u003C\u002Fcode\u003E в \u003Ccode\u003Efor\u003C\u002Fcode\u003E на более простые формы \u003Ccode\u003Efor\u003C\u002Fcode\u003E с явной переменной цикла \u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F#footnote-3\"\u003E[3]\u003C\u002Fa\u003E. Он также \u003Ca href=\"https:\u002F\u002Fdave.cheney.net\u002F2018\u002F05\u002F29\u002Fhow-the-go-runtime-implements-maps-efficiently-without-generics\"\u003Eпереписывает доступ к map для вызовы во время выполнения\u003C\u002Fa\u003E и делает еще многое чего полезного.\u003C\u002Fp\u003E\u003Cp\u003EИменно здесь мы реализуем наш новый оператор \u003Ccode\u003Euntil\u003C\u002Fcode\u003E, превратив его в \u003Ccode\u003Efor\u003C\u002Fcode\u003E с инвертированным условием.\u003C\u002Fp\u003E\u003Cp\u003EМы начнем с обработки новой операции в свиче в \u003Ccode\u003EwalkStmt\u003C\u002Fcode\u003E (этот код находится в \u003Ccode\u003Ewalk\u002Fstmt.go\u003C\u002Fcode\u003E):\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003Ecase ir.OUNTIL:\n  n := n.(*ir.UntilStmt)\n  return walkUntil(n)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ добавляем \u003Ccode\u003EwalkUntil\u003C\u002Fcode\u003E следующим образом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc walkUntil(n *ir.UntilStmt) ir.Node {\n  if n.Cond != nil {\n    init := ir.TakeInit(n.Cond)\n    walkStmtList(init)\n    n.Cond = ir.NewUnaryExpr(base.Pos, ir.ONOT, walkExpr(n.Cond, &amp;init))\n    n.Cond = ir.InitExpr(init, n.Cond)\n  }\n\n  walkStmtList(n.Body)\n  return ir.NewForStmt(n.Pos(), nil, n.Cond, nil, n.Body)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВот и все! Это перепишет узел \u003Ccode\u003EUntilStmt\u003C\u002Fcode\u003E в узел \u003Ccode\u003EForStmt\u003C\u002Fcode\u003E, добавляя унарное логическое отрицание (по сути, !) к условию, как мы проговаривали в самом начале поста.\u003C\u002Fp\u003E\u003Ch3\u003EТестирование\u003C\u002Fh3\u003E\u003Cp\u003EТеперь мы можем протестировать наш модифицированный компилятор на примере программы, которая содержит оператор \u003Ccode\u003Euntil\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E$ cat useuntil.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  i := 4\n  until i == 0 {\n    i--\n    fmt.Println(\"Hello, until!\")\n  }\n}\n\n$ &lt;src checkout\u003E\u002Fbin\u002Fgo run useuntil.go\nHello, until!\nHello, until!\nHello, until!\nHello, until!\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВсе работает!\u003C\u002Fp\u003E\u003Cp\u003EНапоминание: \u003Ccode\u003E&lt;src checkout\u003E\u003C\u002Fcode\u003E — это каталог, в который мы извлекли Go, изменили его и скомпилировали (подробнее смотрите в Приложении).\u003C\u002Fp\u003E\u003Ch3\u003EЗаключение первой части\u003C\u002Fh3\u003E\u003Cp\u003EНа этом мы заканчиваем первую часть. Мы успешно реализовали новый оператор в компиляторе Go. Мы не рассмотрели все части компилятора, потому что мы могли сократить работу, переписав AST, чтобы вместо узлов until использовались узлы \u003Ccode\u003Efor\u003C\u002Fcode\u003E. Это совершенно валидная стратегия компиляции, и компилятор Go уже имеет много подобных трансформаций для \u003Cem\u003Eканонизации\u003C\u002Fem\u003E AST (сокращение до меньшего количества форм, чтобы на последних этапах компиляции было меньше работы). Тем не менее, мы по-прежнему заинтересованы в изучении последних двух этапов компиляции — \u003Cem\u003EПреобразовать в SSA\u003C\u002Fem\u003E и \u003Cem\u003Eсгенерировать машинный код\u003C\u002Fem\u003E. Об этом мы расскажем во \u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-2\u002F\"\u003Eвторой части\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Ch3\u003EПриложение — сборка инструментария Go\u003C\u002Fh3\u003E\u003Cp\u003EПожалуйста, начните с изучения руководства по работе с \u003Ca href=\"https:\u002F\u002Fgolang.org\u002Fdoc\u002Fcontribute.html\"\u003EGo\u003C\u002Fa\u003E. Вот несколько быстрых заметок о воспроизведении модифицированного компилятора Go, как показано в этом посте.\u003C\u002Fp\u003E\u003Cp\u003EЕсть два пути:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКлонировать \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fgolang\u002Fgo\"\u003Eофициальный репозиторий Go\u003C\u002Fa\u003E и внести изменения, описанные в этом посте.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E(рекомендуется) Клонируйте \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Feliben\u002Fgo\"\u003Eмой форк репозитория Go\u003C\u002Fa\u003E и проверьте ветку adduntil-119-part1 , где все эти изменения уже применены вместе с некоторыми хелперами для дебага.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003EКлонированный каталог — это куда указывает \u003Ccode\u003E&lt;src checkout\u003E\u003C\u002Fcode\u003E на протяжении всего поста.\u003C\u002Fp\u003E\u003Cp\u003EЧтобы скомпилировать инструментарий, войдите в \u003Ccode\u003Esrc\u002F\u003C\u002Fcode\u003E и запустите \u003Ccode\u003E.\u002Fmake.bash\u003C\u002Fcode\u003E. Вы также можете запустить \u003Ccode\u003E.\u002Fall.bash\u003C\u002Fcode\u003E для запуска тестов после его сборки. Выполнение \u003Ccode\u003Emake.bash\u003C\u002Fcode\u003E запускает полный трехэтапный процесс начальной построения Go, но даже на моем старом компьютере это занимает всего около минуты.\u003C\u002Fp\u003E\u003Cp\u003EПосле сборки инструментарий устанавливается в \u003Ccode\u003Ebin\u003C\u002Fcode\u003E вместе с \u003Ccode\u003Esrc\u003C\u002Fcode\u003E. Затем мы можем выполнить более быструю пересборку самого компилятора, запустив \u003Ccode\u003Ebin\u002Fgo install cmd\u002Fcompile\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Chr\u002F\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F#footnote-reference-1\"\u003E[1]\u003C\u002Fa\u003E  Пакет types2 — это порт (на внутренние структуры данных компилятора) алгоритмов проверки типов в go\u002Ftypes. Он синхронизируется с go\u002Ftypes.  \u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F#footnote-reference-2\"\u003E[2]\u003C\u002Fa\u003E Если вы просмотрите эту и связанные с ней части кода компилятора, вы заметите, что есть еще один опкод под названием OFORUNTIL. Этот узел реализует цикл \u003Ccode\u003Efor\u003C\u002Fcode\u003E, в котором условие проверяется в конце итерации; он используется внутри компилятора для преобразования некоторых циклов и недоступен программистам Go. Мы проигнорируем это в целях этой статьи.  \u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Feli.thegreenplace.net\u002F2019\u002Fgo-compiler-internals-adding-a-new-statement-to-go-part-1\u002F#footnote-reference-3\"\u003E[3]\u003C\u002Fa\u003E В Go есть несколько специальных “волшебных” операторов range, таких как range по строке, который разбивает ее на руны. Вот где реализованы такие трансформации.  \u003C\u002Fp\u003E\u003Chr\u002F\u003E\u003Cp\u003EВ ближайший час состоится открытое занятие по внутреннему устройству каналов Go. На занятии вы узнаете:\u003Cbr\u002F\u003E- что происходит под капотом, когда Go работает с каналами;\u003Cbr\u002F\u003E- когда каналы без буфера лучше, чем с буфером;\u003Cbr\u002F\u003E- и как записать данные из одной горутины в стэк другой.\u003Cbr\u002F\u003EЕсли интересно, заходите \u003Ca href=\"https:\u002F\u002Fotus.pw\u002FrRG9\u002F\"\u003Eпо ссылке.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"go"},{"titleHtml":"golang"},{"titleHtml":"оператор в go"},{"titleHtml":"компилятор go"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F608\u002F076\u002Fa17\u002F608076a1757dfbce83231141a70a89ad.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F608\u002F076\u002Fa17\u002F608076a1757dfbce83231141a70a89ad.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompany\\\u002Fotus\\\u002Fblog\\\u002F706942\\\u002F\"},\"headline\":\"Под капотом у компилятора Go: добавление нового оператора в Go — часть 1\",\"datePublished\":\"2022-12-21T19:27:11+03:00\",\"dateModified\":\"2022-12-22T01:47:15+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"OTUS\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19.Э...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompany\\\u002Fotus\\\u002Fblog\\\u002F706942\\\u002F#post-content-body\",\"about\":[\"c_otus\",\"h_programming\",\"h_go\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F706942\\\u002Ffdf0ad66f40095b2a39aa80c538d4cee\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F508\\\u002F4b7\\\u002F6b8\\\u002F5084b76b82bb43344e90040cf4b7ac76.png\"]}","metaDescription":"Обновление от 2022-08-09: процесс компиляции несколько изменился с момента написания оригинальной статьи, из-за чего она была актуализирована до версии Go 1.19. Это первая статья из серии из двух...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":true,"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"readingTime":11,"complexity":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"view":"cards","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":""}},"companies":{"companyRefs":{"otus":{"alias":"otus","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F2d5\u002F0ed\u002Fb57\u002F2d50edb57cf45fa07cc4f39f53b78395.png","titleHtml":"OTUS","descriptionHtml":"Цифровые навыки от ведущих экспертов","relatedData":null,"statistics":{"subscribersCount":101365,"rating":901.42,"invest":null,"postsCount":2332,"newsCount":4,"vacanciesCount":0,"employeesCount":56,"careerRating":null},"foundationDate":{"year":"2017","month":"04","day":"01"},"location":{"city":{"id":"447159","title":"Москва"},"region":{"id":"1885","title":"Москва и Московская обл."},"country":{"id":"168","title":"Россия"}},"siteUrl":"https:\u002F\u002Fotus.ru","staffNumber":"51–100 человек","registrationDate":"2017-03-22T08:17:26+00:00","representativeUser":{"alias":"MaxRokatansky","fullname":"OTUS"},"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fotus.ru","siteTitle":"Онлайн‑курсы для профессионалов, дистанционное обучение современным профессиям","favicon":"https:\u002F\u002Fotus.ru\u002Fstatic\u002Fimg\u002Ffavicons\u002Ffavicon-32x32.png"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fclub145052891","siteTitle":"OTUS. Онлайн-образование | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?8"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002FOtusjava","siteTitle":"Telegram: Contact @Otusjava","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"}],"settings":{"analyticsSettings":[],"branding":null,"status":"active","isStartup":false},"metadata":{"titleHtml":"OTUS, Москва - Цифровые навыки от ведущих экспертов с 1 апреля 2017 г.","title":"OTUS, Москва - Цифровые навыки от ведущих экспертов с 1 апреля 2017 г.","keywords":["Программирование","Java","Машинное обучение","Python","Тестирование веб-сервисов","python","java","otus","javascript","программирование","linux","data science","devops","kubernetes","android","machine learning","php","ios","kotlin","c#","машинное обучение","spring","qa","swift","agile"],"descriptionHtml":"2 332 статьи от авторов компании OTUS","description":"2 332 статьи от авторов компании OTUS"},"aDeskSettings":null,"careerAlias":"otus"}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"unreadCount":0,"pagesCount":0},"desktopState":{"desktopFl":null,"desktopHl":null,"isChecked":false,"isLoginDemanded":false},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"flows":{"updates":{"countNewPostsBySubscription":null,"countNewPostsAll":28,"countNewNewsAll":12},"flows":[{"alias":"develop","id":"1","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"alias":"admin","id":"6","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"alias":"design","id":"2","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"alias":"management","id":"3","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"alias":"marketing","id":"4","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"alias":"popsci","id":"7","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}]},"global":{"isPwa":false,"device":"desktop","isHabrCom":true},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"infoPage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"search":null,"query":{},"pathname":null,"path":null,"href":""}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null},"modal":{"modals":[]},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":false,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-256","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F9f9\u002Fe16\u002Faa3\u002F9f9e16aa3959d9417693b87b33b5960a.png","title":"Хабр Карьера","link":"https:\u002F\u002Fu.habr.com\u002FfWIWD"},"title":"Карьерная неделя с победителями рейтинга","lang":"ru","startTime":"2023-02-22T13:00:00+03:00","finishTime":"2023-02-27T12:43:00+03:00","slides":[{"id":"story-256_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F412\u002F447\u002Fe40\u002F412447e40a7f9d7d0bc3def931a8f531.png","button":null},{"id":"story-256_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe5a\u002F945\u002F506\u002Fe5a94550609aa2470112448d69291f01.png","button":null},{"id":"story-256_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F68f\u002Ffd1\u002Fe00\u002F68ffd1e00991476e865643cfb0c1b7a3.png","button":{"title":"Перейти в канал","link":"https:\u002F\u002Fu.habr.com\u002FmZQU8","colorType":"light"}}]},{"id":"story-254","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7ca\u002Fd19\u002F564\u002F7cad19564e3da01131c205970297efed.png","title":"Хабр Новости","link":"https:\u002F\u002Fu.habr.com\u002FW9ecI"},"title":"Снимок мощной солнечной вспышки","lang":"ru","startTime":"2023-02-22T12:10:00+03:00","finishTime":"2023-03-05T11:56:00+03:00","slides":[{"id":"story-254_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e5\u002F39c\u002Fd83\u002F1e539cd8310dbe3ebcb14cffc293a7ff.png","button":null},{"id":"story-254_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cd\u002F0a3\u002F1a9\u002F0cd0a31a9f2ad25a56848a8c6fa7860e.png","button":null},{"id":"story-254_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd15\u002Faec\u002Fadd\u002Fd15aecadde84e134c75b642bdadad5f7.png","button":{"title":"Подробности","link":"https:\u002F\u002Fu.habr.com\u002FW9ecI","colorType":"light"}}]},{"id":"story-252","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff19\u002F48d\u002Fd15\u002Ff1948dd155701f88d36e11387c1660ef.png","title":"Geek Travel","link":"https:\u002F\u002Fu.habr.com\u002F9TZjL"},"title":"Где искать северное сияние в России","lang":"ru","startTime":"2023-02-21T11:35:00+03:00","finishTime":"2023-03-05T11:22:00+03:00","slides":[{"id":"story-252_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F506\u002F188\u002F83b\u002F50618883bc97ce517531018d3290d961.jpg","button":{"title":"К посту","link":"https:\u002F\u002Fu.habr.com\u002F9TZjL","colorType":"light"}},{"id":"story-252_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe42\u002Fa71\u002Fe8e\u002Fe42a71e8eb5583814647f5ad55f9e0ae.jpg","button":null},{"id":"story-252_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F685\u002Fdbe\u002F4ff\u002F685dbe4ffe3940eca28ede7406898846.jpg","button":null},{"id":"story-252_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F383\u002F63b\u002F1f4\u002F38363b1f459d5daace0e4502f0780737.jpg","button":null},{"id":"story-252_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F32b\u002F665\u002F0c4\u002F32b6650c448d698b9ca4dba128afb56e.jpg","button":null},{"id":"story-252_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95e\u002F0b2\u002F5be\u002F95e0b25be55ae919dbebbac6142e670d.jpg","button":null},{"id":"story-252_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F616\u002F1d4\u002Ff84\u002F6161d4f849be8d4e4aeee88ea2e3d572.jpg","button":null}]},{"id":"story-250","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F09c\u002F0f6\u002F15d\u002F09c0f615db74086a1611243d250411eb.png","title":"Хабр","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fhabr\u002Fblog\u002F"},"title":"Лучшее из блогов компаний за неделю","lang":"ru","startTime":"2023-02-21T10:20:00+03:00","finishTime":"2023-02-28T15:20:00+03:00","slides":[{"id":"story-250_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff8d\u002F1f4\u002Fcc3\u002Ff8d1f4cc328fb5308a64c97976ad821a.jpg","button":null},{"id":"story-250_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcf9\u002Fe08\u002F87e\u002Fcf9e0887eda5882faea090e93cfeb057.jpg","button":{"title":"Смотреть списки","link":"https:\u002F\u002Fu.habr.com\u002Fss-tt","colorType":"light"}},{"id":"story-250_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8db\u002Faae\u002F8d4\u002F8dbaae8d401dc775493cce70e4096a89.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fyandex\u002Fblog\u002F716524\u002F","colorType":"light"}},{"id":"story-250_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffe5\u002Fb10\u002F831\u002Ffe5b10831e5a6fbe445a2bd3de96c808.jpg","button":{"title":"Подробнее","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fdododev\u002Fblog\u002F714512\u002F","colorType":"light"}},{"id":"story-250_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0c7\u002Fd91\u002Ff10\u002F0c7d91f101a28ab92af503dd97e9a511.jpg","button":{"title":"Читать советы","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fproductivity_inside\u002Fblog\u002F717108\u002F","colorType":"light"}},{"id":"story-250_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4ea\u002F32a\u002F3dc\u002F4ea32a3dc44b42aaf23c65c43dde62b1.jpg","button":{"title":"Окунуться в прошлое","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Ftimeweb\u002Fblog\u002F714894\u002F","colorType":"light"}},{"id":"story-250_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6f9\u002F3f3\u002F016\u002F6f93f30163ac0c7307ac32d74832049a.jpg","button":{"title":"Размышления","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fcloud4y\u002Fblog\u002F715668\u002F","colorType":"light"}},{"id":"story-250_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e1\u002F35b\u002F17d\u002F3e135b17de83de5d5a9fd901e439221a.jpg","button":{"title":"Узнать больше","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fruvds\u002Fblog\u002F714946\u002F","colorType":"light"}}]},{"id":"story-246","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc41\u002F8cc\u002Fca9\u002Fc418ccca924faf05c11530c5071e627b.png","title":"Хабр Карьера","link":"https:\u002F\u002Fu.habr.com\u002Fitzp2022-new"},"title":"Зарплаты в IT во второй половине 2022","lang":"ru","startTime":"2023-02-20T11:05:00+03:00","finishTime":"2023-03-05T23:59:00+03:00","slides":[{"id":"story-246_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbe2\u002F07d\u002F19f\u002Fbe207d19f3cdc4b89e3618025c071ea0.png","button":null},{"id":"story-246_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcda\u002F93e\u002Fed7\u002Fcda93eed762714814ddfc51c4712f4ed.png","button":null},{"id":"story-246_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb8a\u002Fde4\u002F87f\u002Fb8ade487fa6556af459e032adebf852d.png","button":null},{"id":"story-246_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8f6\u002Fb32\u002F844\u002F8f6b328448ed968a18a60a0cd745bd34.png","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002Fitzp2022-new","colorType":"dark"}}]},{"id":"story-222","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F312\u002Fabe\u002Fd4c\u002F312abed4c2617f05f485c19ae101de7e.png","title":"Хабр","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fhabr\u002Fblog\u002F"},"title":"Любовь, Хабр и роботы","lang":"ru","startTime":"2023-02-14T09:00:14+03:00","finishTime":"2023-02-26T23:59:00+03:00","slides":[{"id":"story-222_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd35\u002Fce5\u002F716\u002Fd35ce5716f14544be26d53e05dc155ab.jpg","button":null},{"id":"story-222_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F191\u002Fb9c\u002F449\u002F191b9c449738d2cb2333ffa8daa1bd39.jpg","button":{"title":"Читать переводы","link":"https:\u002F\u002Fu.habr.com\u002Fval1","colorType":"light"}},{"id":"story-222_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7c6\u002F61d\u002F6d9\u002F7c661d6d915ca10f037ccc7307fa36ec.jpg","button":{"title":"Что получилось?","link":"https:\u002F\u002Fu.habr.com\u002Fval2","colorType":"light"}},{"id":"story-222_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02c\u002F20a\u002Fa28\u002F02c20aa28f1e1cb7d70943bd96eb5ac7.jpg","button":{"title":"Созерцать","link":"https:\u002F\u002Fu.habr.com\u002Fval3","colorType":"light"}},{"id":"story-222_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe94\u002F9d6\u002F03e\u002Fe949d603e63cf1c98dcc4597ba41abfa.jpg","button":{"title":"На свидание","link":"https:\u002F\u002Fu.habr.com\u002Fval4","colorType":"light"}},{"id":"story-222_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7b0\u002F3b3\u002Fed9\u002F7b03b3ed931ce73a0cda771b5e39c813.jpg","button":{"title":"Нашёл?","link":"https:\u002F\u002Fu.habr.com\u002Fval5","colorType":"light"}},{"id":"story-222_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F594\u002Fff6\u002Fbad\u002F594ff6badc0503fa3ca0dffafc31d3a3.jpg","button":{"title":"И сколько же?","link":"https:\u002F\u002Fu.habr.com\u002Fval6","colorType":"light"}},{"id":"story-222_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F452\u002Ff87\u002F9aa\u002F452f879aaf0db9530f35204663ec00e6.jpg","button":{"title":"Глянуть код","link":"https:\u002F\u002Fu.habr.com\u002Fval7","colorType":"light"}}]},{"id":"story-186","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb6b\u002F720\u002F180\u002Fb6b72018041811571246ddf5ef07bd33.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Fstory_season-kuber"},"title":"Столкнуться с кубом","lang":"ru","startTime":"2023-02-01T11:30:00+03:00","finishTime":"2023-02-28T23:59:00+03:00","slides":[{"id":"story-186_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b0\u002F5e8\u002Fffb\u002F2b05e8ffb30634f0f7f5c9602d8e43e6.png","button":null},{"id":"story-186_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fdfb\u002F838\u002F9c1\u002Fdfb8389c197e915942f9144978b91ce4.png","button":null},{"id":"story-186_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F634\u002Fc42\u002Fdfd\u002F634c42dfddb260cdf37f9c9b9d3f34ea.png","button":null},{"id":"story-186_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F401\u002F9f5\u002F59e\u002F4019f559e6c090ded0b46d6deeb4883c.png","button":null},{"id":"story-186_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F82a\u002F9cd\u002Fa48\u002F82a9cda4870156765b749271aca48241.png","button":{"title":"Смотреть участников","link":"https:\u002F\u002Fu.habr.com\u002Fstory_season-kuber_members","colorType":"light"}}]},{"id":"story-152","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa49\u002F0d3\u002F609\u002Fa490d3609f29b6dfc53a7b88ab47ca64.png","title":"Хабр","link":"https:\u002F\u002Fu.habr.com\u002Fstory_HiM-anketa"},"title":"Сеньоры — очень странные люди","lang":"ru","startTime":"2023-01-23T11:00:00+03:00","finishTime":"2023-03-01T23:59:00+03:00","slides":[{"id":"story-152_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbbb\u002F901\u002F063\u002Fbbb9010630ae483ed1f41ec4e2572c13.png","button":null},{"id":"story-152_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4f8\u002F66c\u002F14f\u002F4f866c14f0ca8999334438d7f17c0e3a.png","button":null},{"id":"story-152_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6b9\u002Fa07\u002Fa61\u002F6b9a07a612df213ac3a1c179301828df.png","button":null},{"id":"story-152_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff6b\u002Fadb\u002Fb99\u002Ff6badbb9969d7e34ef4f7492767c6a77.png","button":null},{"id":"story-152_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd9c\u002F9ac\u002F878\u002Fd9c9ac878bec5b494699e0080dd2e813.png","button":null},{"id":"story-152_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fdb1\u002Faf9\u002Fc3b\u002Fdb1af9c3bb557f6cee698cf67610f977.png","button":null},{"id":"story-152_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5cf\u002Fbed\u002F65b\u002F5cfbed65bd20b7051b1aac2b9d6e807e.png","button":null},{"id":"story-152_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa8\u002F251\u002F4a9\u002Ffa82514a9471cd455339e97178d8c021.png","button":null},{"id":"story-152_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbd5\u002F901\u002Fe95\u002Fbd5901e952d9cf638355a3cc8b0c0911.png","button":{"title":"Хочу помочь джуну","link":"https:\u002F\u002Fu.habr.com\u002Fstory_HiM-anketa","colorType":"light"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"items":{},"pagesCache":{},"markedViewedSilently":{},"markedRead":{},"unreadCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null},"unviewedCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null}}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script>
<script src="https://assets.habr.com/habr-web/js/chunk-vendors.2287bfbd.js" defer></script><script src="https://assets.habr.com/habr-web/js/7298.c8f1d73c.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.58744b80.js" defer></script>



    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-726094-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(24049213, "init", {
      defer:true,
      trackLinks:true,
      accurateTrackBounce:true,
      webvisor:false,
    });
  </script>
  <noscript>
    <div>
      <img src="https://mc.yandex.ru/watch/24049213" style="position:absolute; left:-9999px;" alt="" />
    </div>
  </noscript>
  
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
<script src="/js/ads.js" onload="window['zhY4i4nJ9K'] = true"></script>
</body>
</html>
